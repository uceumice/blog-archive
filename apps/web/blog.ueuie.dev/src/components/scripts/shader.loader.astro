---
interface Props {
    id: string;
    shader: string;
}

const props = Astro.props as Props;
---

<script define:vars={{ id: props.id, shader: props.shader }}>
/* ----------------------- Retrieve the WebGL context ----------------------- */
const canvas = document.getElementById(id);
const gl = canvas.getContext('webgl');

/* ------------------------ Set up the shader program ----------------------- */
function createShader(type, source) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        console.error('Shader compilation error:', gl.getShaderInfoLog(shader));
        return null;
    }
    return shader;
}

const fragmentShader = createShader(gl.FRAGMENT_SHADER, shader);

/* ------------------------ Create the shader program ----------------------- */
function createShaderProgram(vertexShader, fragmentShader) {
    const program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        console.error('Shader program linking error:', gl.getProgramInfoLog(program));
        return null;
    }
    return program;
}

const shaderProgram = createShaderProgram(null, fragmentShader);

/* ------------------- Render the shader on the rectangle ------------------- */
gl.useProgram(shaderProgram);

const positionAttributeLocation = gl.getAttribLocation(shaderProgram, 'position');
const positionBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
const positions = [-1, -1, -1, 1, 1, -1, 1, 1];
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);
gl.enableVertexAttribArray(positionAttributeLocation);
gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);
</script>
